diff --git a/src/apk_blob.h b/src/apk_blob.h
index c14980d..0874835 100644
--- a/src/apk_blob.h
+++ b/src/apk_blob.h
@@ -75,7 +75,7 @@ static inline apk_blob_t APK_BLOB_STR(const char *str)
 {
 	if (str == NULL)
 		return APK_BLOB_NULL;
-	return ((apk_blob_t){strlen(str), (void *)(str)});
+	return ((apk_blob_t){(long)strlen(str), (char *)(str)});
 }
 
 static inline apk_blob_t apk_blob_trim(apk_blob_t blob)
@@ -106,7 +106,7 @@ static inline void apk_blob_checksum(apk_blob_t b, const EVP_MD *md, struct apk_
 }
 static inline char *apk_blob_chr(apk_blob_t b, unsigned char ch)
 {
-	return memchr(b.ptr, ch, b.len);
+	return (char *)memchr(b.ptr, ch, b.len);
 }
 
 static inline const int apk_checksum_compare(const struct apk_checksum *a,
diff --git a/src/apk_defines.h b/src/apk_defines.h
index b008b51..e32379d 100644
--- a/src/apk_defines.h
+++ b/src/apk_defines.h
@@ -159,30 +159,30 @@ void *apk_array_resize(void *array, size_t new_size, size_t elem_size);
 	static inline void						\
 	array_type_name##_init(struct array_type_name **a)		\
 	{								\
-		*a = apk_array_resize(NULL, 0, 0);			\
+		*a = (struct array_type_name *)apk_array_resize(NULL, 0, 0);			\
 	}								\
 	static inline void						\
 	array_type_name##_free(struct array_type_name **a)		\
 	{								\
-		*a = apk_array_resize(*a, 0, 0);			\
+		*a = (struct array_type_name *)apk_array_resize(*a, 0, 0);			\
 	}								\
 	static inline void						\
 	array_type_name##_resize(struct array_type_name **a, size_t size)\
 	{								\
-		*a = apk_array_resize(*a, size, sizeof(elem_type_name));\
+		*a = (struct array_type_name *)apk_array_resize(*a, size, sizeof(elem_type_name));\
 	}								\
 	static inline void						\
 	array_type_name##_copy(struct array_type_name **a, struct array_type_name *b)\
 	{								\
 		if (*a == b) return;					\
-		*a = apk_array_resize(*a, b->num, sizeof(elem_type_name));\
+		*a = (struct array_type_name *)apk_array_resize(*a, b->num, sizeof(elem_type_name));\
 		memcpy((*a)->item, b->item, b->num * sizeof(elem_type_name));\
 	}								\
 	static inline elem_type_name *					\
 	array_type_name##_add(struct array_type_name **a)		\
 	{								\
 		int size = 1 + (*a)->num;				\
-		*a = apk_array_resize(*a, size, sizeof(elem_type_name));\
+		*a = (struct array_type_name *)apk_array_resize(*a, size, sizeof(elem_type_name));\
 		return &(*a)->item[size-1];				\
 	}
 
@@ -234,13 +234,13 @@ static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)
 {
 	struct hlist_node *first = h->first;
 
-	n->next = first ? first : LIST_END;
+	n->next = first ? first : (struct hlist_node *)LIST_END;
 	h->first = n;
 }
 
 static inline void hlist_add_after(struct hlist_node *n, struct hlist_node **prev)
 {
-	n->next = *prev ? *prev : LIST_END;
+	n->next = *prev ? *prev : (struct hlist_node *)LIST_END;
 	*prev = n;
 }
 
@@ -288,24 +288,24 @@ static inline void list_init(struct list_head *list)
 	list->prev = list;
 }
 
-static inline void __list_add(struct list_head *new,
+static inline void __list_add(struct list_head *newh,
 			      struct list_head *prev,
 			      struct list_head *next)
 {
-	next->prev = new;
-	new->next = next;
-	new->prev = prev;
-	prev->next = new;
+	next->prev = newh;
+	newh->next = next;
+	newh->prev = prev;
+	prev->next = newh;
 }
 
-static inline void list_add(struct list_head *new, struct list_head *head)
+static inline void list_add(struct list_head *newh, struct list_head *head)
 {
-	__list_add(new, head, head->next);
+	__list_add(newh, head, head->next);
 }
 
-static inline void list_add_tail(struct list_head *new, struct list_head *head)
+static inline void list_add_tail(struct list_head *newh, struct list_head *head)
 {
-	__list_add(new, head->prev, head);
+	__list_add(newh, head->prev, head);
 }
 
 static inline void __list_del(struct list_head *prev, struct list_head *next)
@@ -317,8 +317,8 @@ static inline void __list_del(struct list_head *prev, struct list_head *next)
 static inline void list_del(struct list_head *entry)
 {
 	__list_del(entry->prev, entry->next);
-	entry->next = LIST_POISON1;
-	entry->prev = LIST_POISON2;
+	entry->next = (struct list_head *)LIST_POISON1;
+	entry->prev = (struct list_head *)LIST_POISON2;
 }
 
 static inline void list_del_init(struct list_head *entry)
